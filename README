This Git repository consists of several programs, some standalone. Aside from NN.py, all code was developed from scratch by Angelo Ng for this CSCI 485 project.

==========

The following is a list of supporting code, not meant to be run by itself:

- MC.py : contains Monte Carlo tree search bot code

- NN.py : contains neural network code
Notes: adapted from code by Denny Britz at http://www.wildml.com/2015/09/implementing-a-neural-network-from-scratch/

- TicTacToe.py : contains tic-tac-toe game code

==========

The following is a list of folders:

- data : where training data generated by selfplay.py and montecarlo4.py is stored

- models : where neural network models generated by selfplay.py and traindata.py are saved to
Notes: Two saved models of interest are models/NNselfplay500 and models/NNmcdataA which are the NN model generated by 500 games of self-play, and the NN model generated by 1000 games of MC bot data (wins/ties only) respectively, both of which are discussed in the report for this project. They can be played against using the play.py program (see instructions below)

==========

The following is a list of programs that can be run, as well as instructions for use:

- montecarlo1.py : runs a Monte Carlo simulation of the random bot vs. another random bot
Use: python montecarlo1.py
Notes: to tweak runtime parameters, edit them directly near the top of the file

- montecarlo2.py : runs a Monte Carlo simulation of an untrained NN vs. the random bot
Use: python montecarlo2.py
Notes: to tweak runtime parameters, edit them directly near the top of the file

- montecarlo3.py : runs a Monte Carlo simulation using a trained NN (loaded from file) vs. the random bot
Use: python montecarlo3.py <board rows> <board columns> <k-in-a-row to win> <NN file>
Example: python montecarlo3.py 3 3 3 models/NNselfplay500   # this will run a 3x3 tic-tac-toe simulation using the NN generated from 500 games of self play
Notes: to tweak other runtime parameters, edit them directly near the top of the file. Additionally, no models beyond 3x3 tic-tac-toe games are available, as the project did not extend beyond that scope (although TicTacToe.py is capable of running boards larger than 3x3)

- montecarlo4.py : runs a Monte Carlo simulation using the MC bot in MC.py, which uses a Monte Carlo tree search to pick its moves. The simulation then generates training data which can be used by traindata.py to create a NN model.
Use: python montecarlo4.py <board rows> <board columns> <k-in-a-row to win> <Monte Carlo bot passes> <# games>
Example: python montecarlo4.py 3 3 3 1000 2000   # this will run a 3x3 tic-tac-toe simulation using the MC bot vs. the random bot, with the MC bot doing 1000 simulation passes per available spot (1000 passes has been observed to be sufficient to predict a good move) over 2000 games in total
Notes: to tweak other runtime parameters, edit them directly near the top of the file. The program will save the training data to data/features and data/labels for the training features and labels respectively

- playmc.py : allows the user to play tic-tac-toe against the MC bot
Use: python playmc.py <board rows> <board columns> <k-in-a-row to win> <Monte Carlo bot passes>
Example: python playmc.py 4 4 3 1000   # this will start an endless series of 4x4 tic-tac-toe games (requiring 3-in-a-row to win), with an MC bot that simulates 1000 passes per available move (1000 passes has been observed to be sufficient to predict a good move)

- play.py : allows the user to play tic-tac-toe against a NN model
Use: python play.py <board rows> <board columns> <k-in-a-row to win> <NN model filename>
Example: python play.py 3 3 3 models/NNmcdataA   # this will start an endless series of 3x3 tic-tac-toe games vs. the NN model generated by 1000 games of MC bot data (wins/ties only)

- selfplay.py : begins a series of tic-tac-toe games using untrained NNs which train themselves as games progress
Use: python selfplay.py
Notes: the program saves (after every 10 games) the training features and labels to data/selfplayfeatures and data/selfplaylabels respectively, and also saves the NN to models/selfplayNNxx, where x is the input/output dimension size. To tweak the parameters of the NN, such as hidden layer size, edit them directly near the top of the file

- test2D.py : generates 2-D input data (output dimensionality is set in the file) and trains NN models of varying hidden layer size on the data, and then plots the decision boundaries of the models as well as the accuracy of each model
Use: python test2D.py
Notes: to tweak the parameters of the test, edit them directly near the top of the file

- testdata.py : generates data of higher input and output dimensions and tests them on NNs of varying hidden layer size, then reports the accuracy of each model
Use: python testdata.py
Notes: to tweak the parameters of the test, edit them directly near the top of the file

- traindata.py : generates a NN model based on specified training data files (features and labels files)
Use: python traindata.py <features filename> <labels filename> <# hidden layer nodes> <# training passes>
Example: python traindata.py data/features data/labels 100 4000   # this will train a NN with 100 hidden layer nodes based on the data contained in data/features and data/labels (training data generated by montecarlo4.py) over 4000 training passes
Notes: saves the NN to models/NNxy where x = input dimensionality and y = output dimensionality